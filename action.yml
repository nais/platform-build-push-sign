name: "GAR build/push/sign"
description: "Build, push, and sign (to Google Artifact Registry and optionally to GHCR)"
inputs:
  dockerfile:
    description: "Dockerfile path"
    default: "Dockerfile"
  name:
    description: "Name of image"
    required: true
  google_service_account:
    description: "Name of google service account to impersonate"
    required: false
  push:
    description: "Whether or not to push image"
    default: "true"
  push_ghcr:
    description: "Whether or not to push image to GHCR"
    default: "false"
  workload_identity_provider:
    description: "The workload identity provider for google service account impersonation"
    required: false
  registry:
    description: "The Google Artifact Registry path to push image to"
    default: "europe-north1-docker.pkg.dev/nais-io/nais/images"
  build_args:
    description: "List of build args"
    required: false
  build_secrets:
    description: "List of secrets"
    required: false
  sbom:
    description: "existing SBOM in cyclonedx format"
    default: "auto-generate-for-me-please.json"
  extra_tags:
    description: "A list of tags to be applied in addition to the detailed time+sha-tag and latest-tag"
    default: ""
  multi-platform:
    description: "Build multi-platform images, supporting amd64 and arm64"
    default: "false"
  context:
    description: "Docker build context"
    default: "."
  cache_from:
    description: "cache-from sent to docker/build-push-action"
    required: false
  cache_to:
    description: "cache-to sent to docker/build-push-action"
    required: false
outputs:
  tag:
    description: "full image tag"
    value: ${{ steps.outputs.outputs.tag }}
  version:
    description: "version"
    value: ${{ steps.outputs.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Check inputs
      shell: bash
      run: |
        if [[ "${{ inputs.push }}" == "true" ]]; then
          if [[ "${{ inputs.workload_identity_provider }}" == "" ]]; then
            echo "Input workload_identity_provider is required when push is set to true."
            exit 1
          fi
          if [[ "${{ inputs.google_service_account }}" == "" ]]; then
            echo "Input google_service_account is required when push is set to true."
            exit 1
          fi
        fi
    - name: Set up QEMU
      if: "${{ inputs.multi-platform == 'true' }}"
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # ratchet:docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # ratchet:docker/setup-buildx-action@v3
    - id: "auth"
      name: "Authenticate to Google Cloud"
      if: ${{ inputs.push == 'true' }}
      uses: "google-github-actions/auth@71fee32a0bb7e97b4d33d548e7d957010649d8fa" # ratchet:google-github-actions/auth@v2
      with:
        workload_identity_provider: "${{ inputs.workload_identity_provider }}"
        service_account: "${{ inputs.google_service_account }}@nais-io.iam.gserviceaccount.com"
        token_format: "access_token"
    - name: "Login to registry"
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # ratchet:docker/login-action@v3
      with:
        registry: "${{ inputs.registry }}"
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"
    - name: "Login to GitHub Container Registry"
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # ratchet:docker/login-action@v3
      if: ${{ inputs.push_ghcr == 'true' }}
      with:
        registry: "ghcr.io"
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
    - name: "Docker metadata"
      id: "metadata"
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # ratchet:docker/metadata-action@v5
      with:
        images: |
          "${{ inputs.registry }}/${{ inputs.name }}"
          name=ghcr.io/${{ github.repository_owner }}/${{ inputs.name }},enable=${{ inputs.push_ghcr == 'true' }}
        tags: |
          type=raw,value={{date 'YYYY-MM-DD-HHmmss' tz='Europe/Oslo'}}-{{sha}}
          type=raw,value=latest
          type=raw,value=${{inputs.extra_tags}}
    - name: "Select platforms"
      id: multi-platform
      shell: bash
      run: |
        if [[ "${{ inputs.multi-platform }}" == 'true' ]]; then
          echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
        else
          echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
        fi
    - name: "Build and push"
      id: "build_push"
      uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # ratchet:docker/build-push-action@v5
      with:
        context: "${{ inputs.context }}"
        platforms: "${{ steps.multi-platform.outputs.platforms }}"
        file: "${{ inputs.dockerfile }}"
        push: ${{ inputs.push }}
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        build-args: ${{ inputs.build_args }}
        secrets: ${{ inputs.build_secrets }}
        cache-from: ${{ inputs.cache_from }}
        cache-to: ${{ inputs.cache_to }}
    - name: Write summary
      shell: bash
      run: |
        echo '### tags' >> $GITHUB_STEP_SUMMARY
        echo '${{ steps.metadata.outputs.tags }}' >> $GITHUB_STEP_SUMMARY
    - name: "Generate SBOM, attest and sign image"
      if: ${{ inputs.push == 'true' }}
      uses: nais/attest-sign@a42ac38f98936bedcf97048b6ba2b3c0083ff0ae # ratchet:nais/attest-sign@v1
      with:
        image_ref: ${{ inputs.registry }}/${{ inputs.name }}@${{ steps.build_push.outputs.digest }}
        sbom: ${{ inputs.sbom }}
    - name: "Generate SBOM, attest and sign image (GHCR)"
      if: ${{ inputs.push_ghcr == 'true' }}
      uses: nais/attest-sign@a42ac38f98936bedcf97048b6ba2b3c0083ff0ae # ratchet:nais/attest-sign@v1
      with:
        image_ref: ghcr.io/${{ github.repository_owner }}/${{ inputs.name }}@${{ steps.build_push.outputs.digest }}
        sbom: ${{ inputs.sbom }}
    - name: "Set outputs"
      id: outputs
      shell: bash
      run: |
        echo "tag=${{ fromJSON(steps.metadata.outputs.json).tags[0] }}" >> $GITHUB_OUTPUT
        echo "version=${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}" >> $GITHUB_OUTPUT
